// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `Ticker.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____Ticker_h__
#define ____Ticker_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace argo
{

class TickListener;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::argo::TickListener>&);
::IceProxy::Ice::Object* upCast(::IceProxy::argo::TickListener*);

class TickerPlant;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::argo::TickerPlant>&);
::IceProxy::Ice::Object* upCast(::IceProxy::argo::TickerPlant*);

}

}

namespace argo
{

class TickListener;
bool operator==(const TickListener&, const TickListener&);
bool operator<(const TickListener&, const TickListener&);
::Ice::Object* upCast(::argo::TickListener*);
typedef ::IceInternal::Handle< ::argo::TickListener> TickListenerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::argo::TickListener> TickListenerPrx;
void __patch(TickListenerPtr&, const ::Ice::ObjectPtr&);

class TickerPlant;
bool operator==(const TickerPlant&, const TickerPlant&);
bool operator<(const TickerPlant&, const TickerPlant&);
::Ice::Object* upCast(::argo::TickerPlant*);
typedef ::IceInternal::Handle< ::argo::TickerPlant> TickerPlantPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::argo::TickerPlant> TickerPlantPrx;
void __patch(TickerPlantPtr&, const ::Ice::ObjectPtr&);

}

namespace argo
{

struct Tick
{
    ::std::string symbol;
    ::Ice::Double bidPx;
    ::Ice::Double askPx;
};

typedef ::std::vector< ::argo::Tick> TickSeq;

typedef ::std::vector< ::argo::TickSeq> TickImage;

}

namespace Ice
{
template<>
struct StreamableTraits< ::argo::Tick>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 17;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::argo::Tick, S>
{
    static void write(S* __os, const ::argo::Tick& v)
    {
        __os->write(v.symbol);
        __os->write(v.bidPx);
        __os->write(v.askPx);
    }
};

template<class S>
struct StreamReader< ::argo::Tick, S>
{
    static void read(S* __is, ::argo::Tick& v)
    {
        __is->read(v.symbol);
        __is->read(v.bidPx);
        __is->read(v.askPx);
    }
};

}

namespace argo
{

class Callback_TickListener_onTick_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TickListener_onTick_Base> Callback_TickListener_onTickPtr;

class Callback_TickListener_onImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TickListener_onImage_Base> Callback_TickListener_onImagePtr;

class Callback_TickerPlant_subscribe_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TickerPlant_subscribe_Base> Callback_TickerPlant_subscribePtr;

class Callback_TickerPlant_subscribeWithIdent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TickerPlant_subscribeWithIdent_Base> Callback_TickerPlant_subscribeWithIdentPtr;

class Callback_TickerPlant_sayHello_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TickerPlant_sayHello_Base> Callback_TickerPlant_sayHelloPtr;

}

namespace IceProxy
{

namespace argo
{

class TickListener : virtual public ::IceProxy::Ice::Object
{
public:

    void onTick(const ::argo::TickSeq& __p_t)
    {
        onTick(__p_t, 0);
    }
    void onTick(const ::argo::TickSeq& __p_t, const ::Ice::Context& __ctx)
    {
        onTick(__p_t, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onTick(const ::argo::TickSeq& __p_t, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onTick(__p_t, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_onTick(const ::argo::TickSeq& __p_t, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onTick(__p_t, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onTick(const ::argo::TickSeq& __p_t, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onTick(__p_t, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onTick(const ::argo::TickSeq& __p_t, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onTick(__p_t, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq& __p_t)
    {
        return begin_onTick(__p_t, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq& __p_t, const ::Ice::Context& __ctx)
    {
        return begin_onTick(__p_t, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq& __p_t, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onTick(__p_t, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq& __p_t, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onTick(__p_t, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq& __p_t, const ::argo::Callback_TickListener_onTickPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onTick(__p_t, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq& __p_t, const ::Ice::Context& __ctx, const ::argo::Callback_TickListener_onTickPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onTick(__p_t, &__ctx, __del, __cookie);
    }

    void end_onTick(const ::Ice::AsyncResultPtr&);
    
private:

    void onTick(const ::argo::TickSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void onImage(const ::argo::TickImage& __p_img)
    {
        onImage(__p_img, 0);
    }
    void onImage(const ::argo::TickImage& __p_img, const ::Ice::Context& __ctx)
    {
        onImage(__p_img, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onImage(const ::argo::TickImage& __p_img, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onImage(__p_img, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_onImage(const ::argo::TickImage& __p_img, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onImage(__p_img, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onImage(const ::argo::TickImage& __p_img, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onImage(__p_img, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onImage(const ::argo::TickImage& __p_img, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onImage(__p_img, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage& __p_img)
    {
        return begin_onImage(__p_img, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage& __p_img, const ::Ice::Context& __ctx)
    {
        return begin_onImage(__p_img, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage& __p_img, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_img, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage& __p_img, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_img, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage& __p_img, const ::argo::Callback_TickListener_onImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_img, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage& __p_img, const ::Ice::Context& __ctx, const ::argo::Callback_TickListener_onImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_img, &__ctx, __del, __cookie);
    }

    void end_onImage(const ::Ice::AsyncResultPtr&);
    
private:

    void onImage(const ::argo::TickImage&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TickListener> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_secure(bool __secure) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_twoway() const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_oneway() const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_batchOneway() const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_datagram() const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_batchDatagram() const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_compress(bool __compress) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TickListener> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TickListener*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TickerPlant : virtual public ::IceProxy::Ice::Object
{
public:

    void subscribe(const ::argo::TickListenerPrx& __p_l)
    {
        subscribe(__p_l, 0);
    }
    void subscribe(const ::argo::TickListenerPrx& __p_l, const ::Ice::Context& __ctx)
    {
        subscribe(__p_l, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_subscribe(const ::argo::TickListenerPrx& __p_l, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_subscribe(__p_l, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_subscribe(const ::argo::TickListenerPrx& __p_l, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_subscribe(__p_l, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_subscribe(const ::argo::TickListenerPrx& __p_l, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_subscribe(__p_l, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_subscribe(const ::argo::TickListenerPrx& __p_l, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_subscribe(__p_l, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx& __p_l)
    {
        return begin_subscribe(__p_l, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx& __p_l, const ::Ice::Context& __ctx)
    {
        return begin_subscribe(__p_l, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx& __p_l, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribe(__p_l, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx& __p_l, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribe(__p_l, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx& __p_l, const ::argo::Callback_TickerPlant_subscribePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribe(__p_l, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx& __p_l, const ::Ice::Context& __ctx, const ::argo::Callback_TickerPlant_subscribePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribe(__p_l, &__ctx, __del, __cookie);
    }

    void end_subscribe(const ::Ice::AsyncResultPtr&);
    
private:

    void subscribe(const ::argo::TickListenerPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void subscribeWithIdent(const ::Ice::Identity& __p_ident)
    {
        subscribeWithIdent(__p_ident, 0);
    }
    void subscribeWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx)
    {
        subscribeWithIdent(__p_ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_subscribeWithIdent(const ::Ice::Identity& __p_ident, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_subscribeWithIdent(__p_ident, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_subscribeWithIdent(const ::Ice::Identity& __p_ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_subscribeWithIdent(__p_ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_subscribeWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_subscribeWithIdent(__p_ident, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_subscribeWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_subscribeWithIdent(__p_ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity& __p_ident)
    {
        return begin_subscribeWithIdent(__p_ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx)
    {
        return begin_subscribeWithIdent(__p_ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribeWithIdent(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribeWithIdent(__p_ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity& __p_ident, const ::argo::Callback_TickerPlant_subscribeWithIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribeWithIdent(__p_ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity& __p_ident, const ::Ice::Context& __ctx, const ::argo::Callback_TickerPlant_subscribeWithIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_subscribeWithIdent(__p_ident, &__ctx, __del, __cookie);
    }

    void end_subscribeWithIdent(const ::Ice::AsyncResultPtr&);
    
private:

    void subscribeWithIdent(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string sayHello()
    {
        return sayHello(0);
    }
    ::std::string sayHello(const ::Ice::Context& __ctx)
    {
        return sayHello(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sayHello(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sayHello(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sayHello(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sayHello(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sayHello(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sayHello(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sayHello(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sayHello(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sayHello(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sayHello()
    {
        return begin_sayHello(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sayHello(const ::Ice::Context& __ctx)
    {
        return begin_sayHello(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sayHello(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sayHello(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sayHello(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sayHello(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sayHello(const ::argo::Callback_TickerPlant_sayHelloPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sayHello(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sayHello(const ::Ice::Context& __ctx, const ::argo::Callback_TickerPlant_sayHelloPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sayHello(&__ctx, __del, __cookie);
    }

    ::std::string end_sayHello(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string sayHello(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sayHello(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_secure(bool __secure) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_twoway() const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_oneway() const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_batchOneway() const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_datagram() const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_batchDatagram() const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_compress(bool __compress) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TickerPlant> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TickerPlant*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace argo
{

class TickListener : virtual public ::Ice::Object
{
public:

    typedef TickListenerPrx ProxyType;
    typedef TickListenerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void onTick(const ::argo::TickSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onTick(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onImage(const ::argo::TickImage&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const TickListener& l, const TickListener& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TickListener& l, const TickListener& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class TickerPlant : virtual public ::Ice::Object
{
public:

    typedef TickerPlantPrx ProxyType;
    typedef TickerPlantPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void subscribe(const ::argo::TickListenerPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___subscribe(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void subscribeWithIdent(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___subscribeWithIdent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string sayHello(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sayHello(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const TickerPlant& l, const TickerPlant& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TickerPlant& l, const TickerPlant& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace argo
{

template<class T>
class CallbackNC_TickListener_onTick : public Callback_TickListener_onTick_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TickListener_onTick(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onTick<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onTick<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onTick<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onTick<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TickListener_onTick : public Callback_TickListener_onTick_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TickListener_onTick(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onTick<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onTick<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onTick<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onTick<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TickListener_onImage : public Callback_TickListener_onImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TickListener_onImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TickListener_onImage : public Callback_TickListener_onImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TickListener_onImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TickerPlant_subscribe : public Callback_TickerPlant_subscribe_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TickerPlant_subscribe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribe<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribe<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribe<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribe<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TickerPlant_subscribe : public Callback_TickerPlant_subscribe_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TickerPlant_subscribe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribe<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribe<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribe<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribe<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TickerPlant_subscribeWithIdent : public Callback_TickerPlant_subscribeWithIdent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TickerPlant_subscribeWithIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribeWithIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribeWithIdent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribeWithIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribeWithIdent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TickerPlant_subscribeWithIdent : public Callback_TickerPlant_subscribeWithIdent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TickerPlant_subscribeWithIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribeWithIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribeWithIdent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribeWithIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribeWithIdent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TickerPlant_sayHello : public Callback_TickerPlant_sayHello_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_TickerPlant_sayHello(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::argo::TickerPlantPrx __proxy = ::argo::TickerPlantPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_sayHello(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TickerPlant_sayHelloPtr
newCallback_TickerPlant_sayHello(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_sayHello<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TickerPlant_sayHelloPtr
newCallback_TickerPlant_sayHello(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_sayHello<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TickerPlant_sayHello : public Callback_TickerPlant_sayHello_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_TickerPlant_sayHello(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::argo::TickerPlantPrx __proxy = ::argo::TickerPlantPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_sayHello(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TickerPlant_sayHelloPtr
newCallback_TickerPlant_sayHello(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_sayHello<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TickerPlant_sayHelloPtr
newCallback_TickerPlant_sayHello(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_sayHello<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
