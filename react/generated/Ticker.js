// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Ticker.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let argo = _ModuleRegistry.module("argo");

    argo.TickDirection = Slice.defineEnum([
        ['ZERO', 0], ['UP', 1], ['DOWN', 2]]);

    argo.Tick = class
    {
        constructor(symbol = "", bidPx = 0.0, askPx = 0.0, bidDirection = argo.TickDirection.ZERO, askDirection = argo.TickDirection.ZERO)
        {
            this.symbol = symbol;
            this.bidPx = bidPx;
            this.askPx = askPx;
            this.bidDirection = bidDirection;
            this.askDirection = askDirection;
        }

        _write(ostr)
        {
            ostr.writeString(this.symbol);
            ostr.writeDouble(this.bidPx);
            ostr.writeDouble(this.askPx);
            argo.TickDirection._write(ostr, this.bidDirection);
            argo.TickDirection._write(ostr, this.askDirection);
        }

        _read(istr)
        {
            this.symbol = istr.readString();
            this.bidPx = istr.readDouble();
            this.askPx = istr.readDouble();
            this.bidDirection = argo.TickDirection._read(istr);
            this.askDirection = argo.TickDirection._read(istr);
        }

        static get minWireSize()
        {
            return  19;
        }
    };

    Slice.defineStruct(argo.Tick, false, true);

    Slice.defineSequence(argo, "TickSeqHelper", "argo.Tick", false);

    Slice.defineSequence(argo, "TickImageHelper", "argo.TickSeqHelper", false);

    const iceC_argo_TickListener_ids = [
        "::Ice::Object",
        "::argo::TickListener"
    ];

    argo.TickListener = class extends Ice.Object
    {
    };

    argo.TickListenerPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(argo.TickListener, argo.TickListenerPrx, iceC_argo_TickListener_ids, 1,
    {
        "onTick": [, , , , , [["argo.TickSeqHelper"]], , , , ],
        "onImage": [, , , , , [["argo.TickImageHelper"]], , , , ]
    });

    const iceC_argo_TickerPlant_ids = [
        "::Ice::Object",
        "::argo::TickerPlant"
    ];

    argo.TickerPlant = class extends Ice.Object
    {
    };

    argo.TickerPlantPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(argo.TickerPlant, argo.TickerPlantPrx, iceC_argo_TickerPlant_ids, 1,
    {
        "subscribe": [, , , , , [["argo.TickListenerPrx"]], , , , ],
        "subscribeWithIdent": [, , , , , [[Ice.Identity]], , , , ],
        "sayHello": [, , , , [7], , , , , ]
    });
    exports.argo = argo;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
