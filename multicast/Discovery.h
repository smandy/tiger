// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.0
//
// <auto-generated>
//
// Generated from file `Discovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____Discovery_h__
#define ____Discovery_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Demo
{

class DiscoverReply;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::DiscoverReply>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::DiscoverReply*);

class Discover;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::Discover>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::Discover*);

}

}

namespace Demo
{

class DiscoverReply;
bool operator==(const DiscoverReply&, const DiscoverReply&);
bool operator<(const DiscoverReply&, const DiscoverReply&);
::Ice::Object* upCast(::Demo::DiscoverReply*);
typedef ::IceInternal::Handle< ::Demo::DiscoverReply> DiscoverReplyPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::DiscoverReply> DiscoverReplyPrx;
void __patch(DiscoverReplyPtr&, const ::Ice::ObjectPtr&);

class Discover;
bool operator==(const Discover&, const Discover&);
bool operator<(const Discover&, const Discover&);
::Ice::Object* upCast(::Demo::Discover*);
typedef ::IceInternal::Handle< ::Demo::Discover> DiscoverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::Discover> DiscoverPrx;
void __patch(DiscoverPtr&, const ::Ice::ObjectPtr&);

}

namespace Demo
{

class Callback_DiscoverReply_reply_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DiscoverReply_reply_Base> Callback_DiscoverReply_replyPtr;

class Callback_Discover_lookup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Discover_lookup_Base> Callback_Discover_lookupPtr;

}

namespace IceProxy
{

namespace Demo
{

class DiscoverReply : virtual public ::IceProxy::Ice::Object
{
public:

    void reply(const ::Ice::ObjectPrx& __p_obj)
    {
        reply(__p_obj, 0);
    }
    void reply(const ::Ice::ObjectPrx& __p_obj, const ::Ice::Context& __ctx)
    {
        reply(__p_obj, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reply(const ::Ice::ObjectPrx& __p_obj, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reply(__p_obj, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reply(const ::Ice::ObjectPrx& __p_obj, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reply(__p_obj, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reply(const ::Ice::ObjectPrx& __p_obj, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reply(__p_obj, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reply(const ::Ice::ObjectPrx& __p_obj, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reply(__p_obj, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reply(const ::Ice::ObjectPrx& __p_obj)
    {
        return begin_reply(__p_obj, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reply(const ::Ice::ObjectPrx& __p_obj, const ::Ice::Context& __ctx)
    {
        return begin_reply(__p_obj, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reply(const ::Ice::ObjectPrx& __p_obj, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reply(__p_obj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reply(const ::Ice::ObjectPrx& __p_obj, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reply(__p_obj, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reply(const ::Ice::ObjectPrx& __p_obj, const ::Demo::Callback_DiscoverReply_replyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reply(__p_obj, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reply(const ::Ice::ObjectPrx& __p_obj, const ::Ice::Context& __ctx, const ::Demo::Callback_DiscoverReply_replyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reply(__p_obj, &__ctx, __del, __cookie);
    }

    void end_reply(const ::Ice::AsyncResultPtr&);
    
private:

    void reply(const ::Ice::ObjectPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reply(const ::Ice::ObjectPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_secure(bool __secure) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_twoway() const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_oneway() const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_batchOneway() const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_datagram() const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_batchDatagram() const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_compress(bool __compress) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DiscoverReply> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DiscoverReply*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Discover : virtual public ::IceProxy::Ice::Object
{
public:

    void lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere)
    {
        lookup(__p_replyHere, 0);
    }
    void lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere, const ::Ice::Context& __ctx)
    {
        lookup(__p_replyHere, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_lookup(__p_replyHere, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookup(__p_replyHere, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_lookup(__p_replyHere, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_lookup(__p_replyHere, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere)
    {
        return begin_lookup(__p_replyHere, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere, const ::Ice::Context& __ctx)
    {
        return begin_lookup(__p_replyHere, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookup(__p_replyHere, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookup(__p_replyHere, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere, const ::Demo::Callback_Discover_lookupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookup(__p_replyHere, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_lookup(const ::Demo::DiscoverReplyPrx& __p_replyHere, const ::Ice::Context& __ctx, const ::Demo::Callback_Discover_lookupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_lookup(__p_replyHere, &__ctx, __del, __cookie);
    }

    void end_lookup(const ::Ice::AsyncResultPtr&);
    
private:

    void lookup(const ::Demo::DiscoverReplyPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_lookup(const ::Demo::DiscoverReplyPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Discover> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_secure(bool __secure) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_twoway() const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_oneway() const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_batchOneway() const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_datagram() const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_batchDatagram() const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_compress(bool __compress) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Discover> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Discover*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace Demo
{

class DiscoverReply : virtual public ::Ice::Object
{
public:

    typedef DiscoverReplyPrx ProxyType;
    typedef DiscoverReplyPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void reply(const ::Ice::ObjectPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reply(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const DiscoverReply& l, const DiscoverReply& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DiscoverReply& l, const DiscoverReply& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Discover : virtual public ::Ice::Object
{
public:

    typedef DiscoverPrx ProxyType;
    typedef DiscoverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void lookup(const ::Demo::DiscoverReplyPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___lookup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Discover& l, const Discover& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Discover& l, const Discover& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Demo
{

template<class T>
class CallbackNC_DiscoverReply_reply : public Callback_DiscoverReply_reply_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DiscoverReply_reply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DiscoverReply_replyPtr
newCallback_DiscoverReply_reply(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DiscoverReply_reply<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DiscoverReply_replyPtr
newCallback_DiscoverReply_reply(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DiscoverReply_reply<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DiscoverReply_replyPtr
newCallback_DiscoverReply_reply(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DiscoverReply_reply<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DiscoverReply_replyPtr
newCallback_DiscoverReply_reply(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DiscoverReply_reply<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DiscoverReply_reply : public Callback_DiscoverReply_reply_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DiscoverReply_reply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DiscoverReply_replyPtr
newCallback_DiscoverReply_reply(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DiscoverReply_reply<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DiscoverReply_replyPtr
newCallback_DiscoverReply_reply(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DiscoverReply_reply<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DiscoverReply_replyPtr
newCallback_DiscoverReply_reply(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DiscoverReply_reply<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DiscoverReply_replyPtr
newCallback_DiscoverReply_reply(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DiscoverReply_reply<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Discover_lookup : public Callback_Discover_lookup_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Discover_lookup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Discover_lookupPtr
newCallback_Discover_lookup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Discover_lookup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Discover_lookupPtr
newCallback_Discover_lookup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Discover_lookup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Discover_lookupPtr
newCallback_Discover_lookup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Discover_lookup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Discover_lookupPtr
newCallback_Discover_lookup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Discover_lookup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Discover_lookup : public Callback_Discover_lookup_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Discover_lookup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Discover_lookupPtr
newCallback_Discover_lookup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Discover_lookup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Discover_lookupPtr
newCallback_Discover_lookup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Discover_lookup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Discover_lookupPtr
newCallback_Discover_lookup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Discover_lookup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Discover_lookupPtr
newCallback_Discover_lookup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Discover_lookup<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
