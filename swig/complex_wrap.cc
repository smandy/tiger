/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGD
#define SWIGD
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/* Contract support. */
#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_DSetPendingException(SWIG_DException, msg); return nullreturn; } else


// Support for throwing D exceptions from C/C++.
typedef enum {
  SWIG_DException = 0,
  SWIG_DIllegalArgumentException,
  SWIG_DIllegalElementException,
  SWIG_DIOException,
  SWIG_DNoSuchElementException
} SWIG_DExceptionCodes;

typedef void (* SWIG_DExceptionCallback_t)(const char *);

typedef struct {
  SWIG_DExceptionCodes code;
  SWIG_DExceptionCallback_t callback;
} SWIG_DException_t;

static SWIG_DException_t SWIG_d_exceptions[] = {
  { SWIG_DException, NULL },
  { SWIG_DIllegalArgumentException, NULL },
  { SWIG_DIllegalElementException, NULL },
  { SWIG_DIOException, NULL },
  { SWIG_DNoSuchElementException, NULL }
};

static void SWIGUNUSED SWIG_DSetPendingException(SWIG_DExceptionCodes code, const char *msg) {
  if ((size_t)code < sizeof(SWIG_d_exceptions)/sizeof(SWIG_DException_t)) {
    SWIG_d_exceptions[code].callback(msg);
  } else {
    SWIG_d_exceptions[SWIG_DException].callback(msg);
  }
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterExceptionCallbacks_complexmodule(
  SWIG_DExceptionCallback_t exceptionCallback,
  SWIG_DExceptionCallback_t illegalArgumentCallback,
  SWIG_DExceptionCallback_t illegalElementCallback,
  SWIG_DExceptionCallback_t ioCallback,
  SWIG_DExceptionCallback_t noSuchElementCallback) {
  SWIG_d_exceptions[SWIG_DException].callback = exceptionCallback;
  SWIG_d_exceptions[SWIG_DIllegalArgumentException].callback = illegalArgumentCallback;
  SWIG_d_exceptions[SWIG_DIllegalElementException].callback = illegalElementCallback;
  SWIG_d_exceptions[SWIG_DIOException].callback = ioCallback;
  SWIG_d_exceptions[SWIG_DNoSuchElementException].callback = noSuchElementCallback;
}


// Callback for returning strings to D without leaking memory.
typedef char * (* SWIG_DStringHelperCallback)(const char *);
static SWIG_DStringHelperCallback SWIG_d_string_callback = NULL;

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterStringCallback_complexmodule(SWIG_DStringHelperCallback callback) {
  SWIG_d_string_callback = callback;
}

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13





#include "sstream"

#include <string>

#include "complex.hpp"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_DThrowException(int code, const char *msg) {
  SWIG_DExceptionCodes exception_code;
  switch(code) {
  case SWIG_IndexError:
    exception_code = SWIG_DNoSuchElementException;
    break;
  case SWIG_IOError:
    exception_code = SWIG_DIOException;
    break;
  case SWIG_ValueError:
    exception_code = SWIG_DIllegalArgumentException;
    break;
  case SWIG_DivisionByZero:
  case SWIG_MemoryError:
  case SWIG_OverflowError:
  case SWIG_RuntimeError:
  case SWIG_TypeError:
  case SWIG_SyntaxError:
  case SWIG_SystemError:
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_DException;
    break;
  }
  SWIG_DSetPendingException(exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <utility>

SWIGINTERN std::string Complex___repr__(Complex *self){  return self->toString(); }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void D_Complex_x_set(void * jarg1, int jarg2) {
  Complex *arg1 = (Complex *) 0 ;
  int arg2 ;
  
  arg1 = (Complex *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int D_Complex_x_get(void * jarg1) {
  int jresult ;
  Complex *arg1 = (Complex *) 0 ;
  int result;
  
  arg1 = (Complex *)jarg1;
  result = (int) ((arg1)->x);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Complex_y_set(void * jarg1, int jarg2) {
  Complex *arg1 = (Complex *) 0 ;
  int arg2 ;
  
  arg1 = (Complex *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int D_Complex_y_get(void * jarg1) {
  int jresult ;
  Complex *arg1 = (Complex *) 0 ;
  int result;
  
  arg1 = (Complex *)jarg1;
  result = (int) ((arg1)->y);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_Complex_getX(void * jarg1) {
  int jresult ;
  Complex *arg1 = (Complex *) 0 ;
  int result;
  
  arg1 = (Complex *)jarg1;
  result = (int)((Complex const *)arg1)->getX();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_Complex_getY(void * jarg1) {
  int jresult ;
  Complex *arg1 = (Complex *) 0 ;
  int result;
  
  arg1 = (Complex *)jarg1;
  result = (int)((Complex const *)arg1)->getY();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_Complex__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  Complex *result = 0 ;
  
  arg1 = (int)jarg1;
  arg2 = (int)jarg2;
  result = (Complex *)new Complex(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Complex__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  Complex *result = 0 ;
  
  arg1 = (int)jarg1;
  result = (Complex *)new Complex(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Complex__SWIG_2() {
  void * jresult ;
  Complex *result = 0 ;
  
  result = (Complex *)new Complex();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Complex_opAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  Complex *arg1 = (Complex *) 0 ;
  Complex *arg2 = 0 ;
  Complex result;
  
  arg1 = (Complex *)jarg1;
  arg2 = (Complex *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Complex const & type is null");
    return 0;
  } 
  result = (arg1)->operator +((Complex const &)*arg2);
  jresult = new Complex((const Complex &)result); 
  return jresult;
}


SWIGEXPORT void * D_Complex_opSub(void * jarg1, void * jarg2) {
  void * jresult ;
  Complex *arg1 = (Complex *) 0 ;
  Complex *arg2 = 0 ;
  Complex result;
  
  arg1 = (Complex *)jarg1;
  arg2 = (Complex *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Complex const & type is null");
    return 0;
  } 
  result = (arg1)->operator -((Complex const &)*arg2);
  jresult = new Complex((const Complex &)result); 
  return jresult;
}


SWIGEXPORT char * D_Complex_toString(void * jarg1) {
  char * jresult ;
  Complex *arg1 = (Complex *) 0 ;
  std::string result;
  
  arg1 = (Complex *)jarg1;
  result = ((Complex const *)arg1)->toString();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Complex___repr__(void * jarg1) {
  char * jresult ;
  Complex *arg1 = (Complex *) 0 ;
  std::string result;
  
  arg1 = (Complex *)jarg1;
  result = Complex___repr__(arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_delete_Complex(void * jarg1) {
  Complex *arg1 = (Complex *) 0 ;
  
  arg1 = (Complex *)jarg1;
  delete arg1;
}


#ifdef __cplusplus
}
#endif

