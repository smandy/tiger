"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Ticker.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function (module, require, exports) {
    var Ice = require("ice").Ice;
    var _ModuleRegistry = Ice._ModuleRegistry;
    var Slice = Ice.Slice;

    var argo = _ModuleRegistry.module("argo");

    argo.TickDirection = Slice.defineEnum([['ZERO', 0], ['UP', 1], ['DOWN', 2]]);

    argo.Tick = function () {
        function _class() {
            var symbol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
            var bidPx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;
            var askPx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;
            var bidDirection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : argo.TickDirection.ZERO;
            var askDirection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : argo.TickDirection.ZERO;

            _classCallCheck(this, _class);

            this.symbol = symbol;
            this.bidPx = bidPx;
            this.askPx = askPx;
            this.bidDirection = bidDirection;
            this.askDirection = askDirection;
        }

        _createClass(_class, [{
            key: "_write",
            value: function _write(ostr) {
                ostr.writeString(this.symbol);
                ostr.writeDouble(this.bidPx);
                ostr.writeDouble(this.askPx);
                argo.TickDirection._write(ostr, this.bidDirection);
                argo.TickDirection._write(ostr, this.askDirection);
            }
        }, {
            key: "_read",
            value: function _read(istr) {
                this.symbol = istr.readString();
                this.bidPx = istr.readDouble();
                this.askPx = istr.readDouble();
                this.bidDirection = argo.TickDirection._read(istr);
                this.askDirection = argo.TickDirection._read(istr);
            }
        }], [{
            key: "minWireSize",
            get: function get() {
                return 19;
            }
        }]);

        return _class;
    }();

    Slice.defineStruct(argo.Tick, false, true);

    Slice.defineSequence(argo, "TickSeqHelper", "argo.Tick", false);

    Slice.defineSequence(argo, "TickImageHelper", "argo.TickSeqHelper", false);

    var iceC_argo_TickListener_ids = ["::Ice::Object", "::argo::TickListener"];

    argo.TickListener = function (_Ice$Object) {
        _inherits(_class2, _Ice$Object);

        function _class2() {
            _classCallCheck(this, _class2);

            return _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).apply(this, arguments));
        }

        return _class2;
    }(Ice.Object);

    argo.TickListenerPrx = function (_Ice$ObjectPrx) {
        _inherits(_class3, _Ice$ObjectPrx);

        function _class3() {
            _classCallCheck(this, _class3);

            return _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).apply(this, arguments));
        }

        return _class3;
    }(Ice.ObjectPrx);

    Slice.defineOperations(argo.TickListener, argo.TickListenerPrx, iceC_argo_TickListener_ids, 1, {
        "onTick": [,,,,, [["argo.TickSeqHelper"]],,,,],
        "onImage": [,,,,, [["argo.TickImageHelper"]],,,,]
    });

    var iceC_argo_TickerPlant_ids = ["::Ice::Object", "::argo::TickerPlant"];

    argo.TickerPlant = function (_Ice$Object2) {
        _inherits(_class4, _Ice$Object2);

        function _class4() {
            _classCallCheck(this, _class4);

            return _possibleConstructorReturn(this, (_class4.__proto__ || Object.getPrototypeOf(_class4)).apply(this, arguments));
        }

        return _class4;
    }(Ice.Object);

    argo.TickerPlantPrx = function (_Ice$ObjectPrx2) {
        _inherits(_class5, _Ice$ObjectPrx2);

        function _class5() {
            _classCallCheck(this, _class5);

            return _possibleConstructorReturn(this, (_class5.__proto__ || Object.getPrototypeOf(_class5)).apply(this, arguments));
        }

        return _class5;
    }(Ice.ObjectPrx);

    Slice.defineOperations(argo.TickerPlant, argo.TickerPlantPrx, iceC_argo_TickerPlant_ids, 1, {
        "subscribe": [,,,,, [["argo.TickListenerPrx"]],,,,],
        "subscribeWithIdent": [,,,,, [[Ice.Identity]],,,,],
        "sayHello": [,,,, [7],,,,,]
    });
    exports.argo = argo;
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : undefined.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : undefined);