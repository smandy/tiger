// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Foo.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Foo_h__
#define __Foo_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace argo
{

class Foo;
class FooPrx;

}

namespace argo
{

class Foo : public virtual ::Ice::Object
{
public:

    using ProxyType = FooPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void doitAsync(::std::function<void(const ::std::string& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_doit(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void doitAgainAsync(::std::function<void(const ::std::string& returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_doitAgain(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void addAsync(int a, int b, ::std::function<void(int returnValue)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_add(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace argo
{

class FooPrx : public virtual ::Ice::Proxy<FooPrx, ::Ice::ObjectPrx>
{
public:

    ::std::string doit(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &FooPrx::_iceI_doit, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto doitAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &FooPrx::_iceI_doit, context);
    }

    ::std::function<void()>
    doitAsync(::std::function<void(::std::string)> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &FooPrx::_iceI_doit, context);
    }

    /// \cond INTERNAL
    void _iceI_doit(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    ::std::string doitAgain(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &FooPrx::_iceI_doitAgain, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto doitAgainAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &FooPrx::_iceI_doitAgain, context);
    }

    ::std::function<void()>
    doitAgainAsync(::std::function<void(::std::string)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &FooPrx::_iceI_doitAgain, context);
    }

    /// \cond INTERNAL
    void _iceI_doitAgain(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    int add(int a, int b, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &FooPrx::_iceI_add, a, b, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto addAsync(int a, int b, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &FooPrx::_iceI_add, a, b, context);
    }

    ::std::function<void()>
    addAsync(int a, int b,
             ::std::function<void(int)> response,
             ::std::function<void(::std::exception_ptr)> ex = nullptr,
             ::std::function<void(bool)> sent = nullptr,
             const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &FooPrx::_iceI_add, a, b, context);
    }

    /// \cond INTERNAL
    void _iceI_add(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, int, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    FooPrx() = default;
    friend ::std::shared_ptr<FooPrx> IceInternal::createProxy<FooPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace argo
{

using FooPtr = ::std::shared_ptr<Foo>;
using FooPrxPtr = ::std::shared_ptr<FooPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace argo
{

class Foo;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::argo::Foo>&);
::IceProxy::Ice::Object* upCast(::IceProxy::argo::Foo*);
/// \endcond

}

}

namespace argo
{

class Foo;
/// \cond INTERNAL
::Ice::Object* upCast(Foo*);
/// \endcond
typedef ::IceInternal::Handle< Foo> FooPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::argo::Foo> FooPrx;
typedef FooPrx FooPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(FooPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace argo
{

/**
 * AMD callback class for argo::Foo::doit_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_Foo_doit : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Foo_doit();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const ::std::string& result) = 0;
};

typedef ::IceUtil::Handle< ::argo::AMD_Foo_doit> AMD_Foo_doitPtr;

/**
 * AMD callback class for argo::Foo::doitAgain_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_Foo_doitAgain : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Foo_doitAgain();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(const ::std::string& result) = 0;
};

typedef ::IceUtil::Handle< ::argo::AMD_Foo_doitAgain> AMD_Foo_doitAgainPtr;

/**
 * AMD callback class for argo::Foo::add_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_Foo_add : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Foo_add();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(::Ice::Int result) = 0;
};

typedef ::IceUtil::Handle< ::argo::AMD_Foo_add> AMD_Foo_addPtr;

}

/// \cond INTERNAL
namespace IceAsync
{

namespace argo
{

class AMD_Foo_doit : public ::argo::AMD_Foo_doit, public ::IceInternal::IncomingAsync
{
public:

    AMD_Foo_doit(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
};

class AMD_Foo_doitAgain : public ::argo::AMD_Foo_doitAgain, public ::IceInternal::IncomingAsync
{
public:

    AMD_Foo_doitAgain(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
};

class AMD_Foo_add : public ::argo::AMD_Foo_add, public ::IceInternal::IncomingAsync
{
public:

    AMD_Foo_add(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

}

}
/// \endcond

namespace argo
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::argo::Foo::begin_doit.
 * Create a wrapper instance by calling ::argo::newCallback_Foo_doit.
 */
class Callback_Foo_doit_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Foo_doit_Base> Callback_Foo_doitPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::argo::Foo::begin_doitAgain.
 * Create a wrapper instance by calling ::argo::newCallback_Foo_doitAgain.
 */
class Callback_Foo_doitAgain_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Foo_doitAgain_Base> Callback_Foo_doitAgainPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::argo::Foo::begin_add.
 * Create a wrapper instance by calling ::argo::newCallback_Foo_add.
 */
class Callback_Foo_add_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Foo_add_Base> Callback_Foo_addPtr;

}

namespace IceProxy
{

namespace argo
{

class Foo : public virtual ::Ice::Proxy<Foo, ::IceProxy::Ice::Object>
{
public:

    ::std::string doit(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_doit(_iceI_begin_doit(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_doit(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_doit(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_doit(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_doit(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_doit(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_doit(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_doit(const ::argo::Callback_Foo_doitPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_doit(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_doit(const ::Ice::Context& context, const ::argo::Callback_Foo_doitPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_doit(context, cb, cookie);
    }

    ::std::string end_doit(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_doit(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string doitAgain(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_doitAgain(_iceI_begin_doitAgain(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_doitAgain(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_doitAgain(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_doitAgain(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_doitAgain(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_doitAgain(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_doitAgain(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_doitAgain(const ::argo::Callback_Foo_doitAgainPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_doitAgain(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_doitAgain(const ::Ice::Context& context, const ::argo::Callback_Foo_doitAgainPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_doitAgain(context, cb, cookie);
    }

    ::std::string end_doitAgain(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_doitAgain(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int add(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_add(_iceI_begin_add(a, b, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_add(a, b, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int a, ::Ice::Int b, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_add(a, b, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_add(a, b, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int a, ::Ice::Int b, const ::argo::Callback_Foo_addPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_add(a, b, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_add(::Ice::Int a, ::Ice::Int b, const ::Ice::Context& context, const ::argo::Callback_Foo_addPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_add(a, b, context, cb, cookie);
    }

    ::Ice::Int end_add(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_add(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace argo
{

class Foo : public virtual ::Ice::Object
{
public:

    typedef FooPrx ProxyType;
    typedef FooPtr PointerType;

    virtual ~Foo();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void doit_async(const ::argo::AMD_Foo_doitPtr& cb, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_doit(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void doitAgain_async(const ::argo::AMD_Foo_doitAgainPtr& cb, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_doitAgain(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void add_async(const ::argo::AMD_Foo_addPtr& cb, ::Ice::Int a, ::Ice::Int b, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_add(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Foo& lhs, const Foo& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Foo& lhs, const Foo& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

namespace argo
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::argo::Foo::begin_doit.
 * Create a wrapper instance by calling ::argo::newCallback_Foo_doit.
 */
template<class T>
class CallbackNC_Foo_doit : public Callback_Foo_doit_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Foo_doit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FooPrx proxy = FooPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_doit(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_doit.
 */
template<class T> Callback_Foo_doitPtr
newCallback_Foo_doit(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Foo_doit<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_doit.
 */
template<class T> Callback_Foo_doitPtr
newCallback_Foo_doit(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Foo_doit<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::argo::Foo::begin_doit.
 * Create a wrapper instance by calling ::argo::newCallback_Foo_doit.
 */
template<class T, typename CT>
class Callback_Foo_doit : public Callback_Foo_doit_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Foo_doit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FooPrx proxy = FooPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_doit(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_doit.
 */
template<class T, typename CT> Callback_Foo_doitPtr
newCallback_Foo_doit(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Foo_doit<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_doit.
 */
template<class T, typename CT> Callback_Foo_doitPtr
newCallback_Foo_doit(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Foo_doit<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::argo::Foo::begin_doitAgain.
 * Create a wrapper instance by calling ::argo::newCallback_Foo_doitAgain.
 */
template<class T>
class CallbackNC_Foo_doitAgain : public Callback_Foo_doitAgain_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Foo_doitAgain(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FooPrx proxy = FooPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_doitAgain(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_doitAgain.
 */
template<class T> Callback_Foo_doitAgainPtr
newCallback_Foo_doitAgain(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Foo_doitAgain<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_doitAgain.
 */
template<class T> Callback_Foo_doitAgainPtr
newCallback_Foo_doitAgain(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Foo_doitAgain<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::argo::Foo::begin_doitAgain.
 * Create a wrapper instance by calling ::argo::newCallback_Foo_doitAgain.
 */
template<class T, typename CT>
class Callback_Foo_doitAgain : public Callback_Foo_doitAgain_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Foo_doitAgain(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FooPrx proxy = FooPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_doitAgain(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_doitAgain.
 */
template<class T, typename CT> Callback_Foo_doitAgainPtr
newCallback_Foo_doitAgain(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Foo_doitAgain<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_doitAgain.
 */
template<class T, typename CT> Callback_Foo_doitAgainPtr
newCallback_Foo_doitAgain(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Foo_doitAgain<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::argo::Foo::begin_add.
 * Create a wrapper instance by calling ::argo::newCallback_Foo_add.
 */
template<class T>
class CallbackNC_Foo_add : public Callback_Foo_add_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Foo_add(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FooPrx proxy = FooPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_add(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_add.
 */
template<class T> Callback_Foo_addPtr
newCallback_Foo_add(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Foo_add<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_add.
 */
template<class T> Callback_Foo_addPtr
newCallback_Foo_add(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Foo_add<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::argo::Foo::begin_add.
 * Create a wrapper instance by calling ::argo::newCallback_Foo_add.
 */
template<class T, typename CT>
class Callback_Foo_add : public Callback_Foo_add_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Foo_add(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FooPrx proxy = FooPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_add(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_add.
 */
template<class T, typename CT> Callback_Foo_addPtr
newCallback_Foo_add(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Foo_add<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::Foo::begin_add.
 */
template<class T, typename CT> Callback_Foo_addPtr
newCallback_Foo_add(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Foo_add<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
