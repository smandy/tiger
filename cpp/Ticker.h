// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Ticker.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Ticker_h__
#define __Ticker_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/Identity.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace argo
{

class TickListener;
class TickListenerPrx;
class TickerPlant;
class TickerPlantPrx;

}

namespace argo
{

enum class TickDirection : unsigned char
{
    ZERO,
    UP,
    DOWN
};

struct Tick
{
    long long int symbol;
    double bidPx;
    double askPx;
    TickDirection bidDirection;
    TickDirection askDirection;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const long long int&, const double&, const double&, const TickDirection&, const TickDirection&> ice_tuple() const
    {
        return std::tie(symbol, bidPx, askPx, bidDirection, askDirection);
    }
};

using TickSeq = ::std::vector<Tick>;

using TickImage = ::std::vector<TickSeq>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace argo
{

class TickListener : public virtual ::Ice::Object
{
public:

    using ProxyType = TickListenerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void onTick(TickSeq t, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_onTick(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void onImage(TickImage img, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_onImage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class TickerPlant : public virtual ::Ice::Object
{
public:

    using ProxyType = TickerPlantPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void subscribe(::std::shared_ptr<TickListenerPrx> l, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_subscribe(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void subscribeWithIdent(::Ice::Identity ident, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_subscribeWithIdent(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string sayHello(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sayHello(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace argo
{

class TickListenerPrx : public virtual ::Ice::Proxy<TickListenerPrx, ::Ice::ObjectPrx>
{
public:

    void onTick(const TickSeq& t, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TickListenerPrx::_iceI_onTick, t, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto onTickAsync(const TickSeq& t, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TickListenerPrx::_iceI_onTick, t, context);
    }

    ::std::function<void()>
    onTickAsync(const TickSeq& t,
                ::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &TickListenerPrx::_iceI_onTick, t, context);
    }

    /// \cond INTERNAL
    void _iceI_onTick(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const TickSeq&, const ::Ice::Context&);
    /// \endcond

    void onImage(const TickImage& img, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TickListenerPrx::_iceI_onImage, img, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto onImageAsync(const TickImage& img, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TickListenerPrx::_iceI_onImage, img, context);
    }

    ::std::function<void()>
    onImageAsync(const TickImage& img,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &TickListenerPrx::_iceI_onImage, img, context);
    }

    /// \cond INTERNAL
    void _iceI_onImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const TickImage&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    TickListenerPrx() = default;
    friend ::std::shared_ptr<TickListenerPrx> IceInternal::createProxy<TickListenerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class TickerPlantPrx : public virtual ::Ice::Proxy<TickerPlantPrx, ::Ice::ObjectPrx>
{
public:

    void subscribe(const ::std::shared_ptr<TickListenerPrx>& l, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TickerPlantPrx::_iceI_subscribe, l, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto subscribeAsync(const ::std::shared_ptr<TickListenerPrx>& l, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TickerPlantPrx::_iceI_subscribe, l, context);
    }

    ::std::function<void()>
    subscribeAsync(const ::std::shared_ptr<TickListenerPrx>& l,
                   ::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &TickerPlantPrx::_iceI_subscribe, l, context);
    }

    /// \cond INTERNAL
    void _iceI_subscribe(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<TickListenerPrx>&, const ::Ice::Context&);
    /// \endcond

    void subscribeWithIdent(const ::Ice::Identity& ident, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &TickerPlantPrx::_iceI_subscribeWithIdent, ident, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto subscribeWithIdentAsync(const ::Ice::Identity& ident, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &TickerPlantPrx::_iceI_subscribeWithIdent, ident, context);
    }

    ::std::function<void()>
    subscribeWithIdentAsync(const ::Ice::Identity& ident,
                            ::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &TickerPlantPrx::_iceI_subscribeWithIdent, ident, context);
    }

    /// \cond INTERNAL
    void _iceI_subscribeWithIdent(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Identity&, const ::Ice::Context&);
    /// \endcond

    ::std::string sayHello(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &TickerPlantPrx::_iceI_sayHello, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sayHelloAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &TickerPlantPrx::_iceI_sayHello, context);
    }

    ::std::function<void()>
    sayHelloAsync(::std::function<void(::std::string)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &TickerPlantPrx::_iceI_sayHello, context);
    }

    /// \cond INTERNAL
    void _iceI_sayHello(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    TickerPlantPrx() = default;
    friend ::std::shared_ptr<TickerPlantPrx> IceInternal::createProxy<TickerPlantPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::argo::TickDirection>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::argo::Tick>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::argo::Tick, S>
{
    static void read(S* istr, ::argo::Tick& v)
    {
        istr->readAll(v.symbol, v.bidPx, v.askPx, v.bidDirection, v.askDirection);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace argo
{

using TickListenerPtr = ::std::shared_ptr<TickListener>;
using TickListenerPrxPtr = ::std::shared_ptr<TickListenerPrx>;

using TickerPlantPtr = ::std::shared_ptr<TickerPlant>;
using TickerPlantPrxPtr = ::std::shared_ptr<TickerPlantPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace argo
{

class TickListener;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::argo::TickListener>&);
::IceProxy::Ice::Object* upCast(::IceProxy::argo::TickListener*);
/// \endcond

class TickerPlant;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::argo::TickerPlant>&);
::IceProxy::Ice::Object* upCast(::IceProxy::argo::TickerPlant*);
/// \endcond

}

}

namespace argo
{

class TickListener;
/// \cond INTERNAL
::Ice::Object* upCast(TickListener*);
/// \endcond
typedef ::IceInternal::Handle< TickListener> TickListenerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::argo::TickListener> TickListenerPrx;
typedef TickListenerPrx TickListenerPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(TickListenerPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class TickerPlant;
/// \cond INTERNAL
::Ice::Object* upCast(TickerPlant*);
/// \endcond
typedef ::IceInternal::Handle< TickerPlant> TickerPlantPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::argo::TickerPlant> TickerPlantPrx;
typedef TickerPlantPrx TickerPlantPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(TickerPlantPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace argo
{

enum TickDirection
{
    ZERO,
    UP,
    DOWN
};

struct Tick
{
    ::Ice::Long symbol;
    ::Ice::Double bidPx;
    ::Ice::Double askPx;
    TickDirection bidDirection;
    TickDirection askDirection;
};

typedef ::std::vector<argo::Tick> TickSeq;

typedef ::std::vector<argo::TickSeq> TickImage;

}

namespace argo
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::argo::TickListener::begin_onTick.
 * Create a wrapper instance by calling ::argo::newCallback_TickListener_onTick.
 */
class Callback_TickListener_onTick_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TickListener_onTick_Base> Callback_TickListener_onTickPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::argo::TickListener::begin_onImage.
 * Create a wrapper instance by calling ::argo::newCallback_TickListener_onImage.
 */
class Callback_TickListener_onImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TickListener_onImage_Base> Callback_TickListener_onImagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::argo::TickerPlant::begin_subscribe.
 * Create a wrapper instance by calling ::argo::newCallback_TickerPlant_subscribe.
 */
class Callback_TickerPlant_subscribe_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TickerPlant_subscribe_Base> Callback_TickerPlant_subscribePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::argo::TickerPlant::begin_subscribeWithIdent.
 * Create a wrapper instance by calling ::argo::newCallback_TickerPlant_subscribeWithIdent.
 */
class Callback_TickerPlant_subscribeWithIdent_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TickerPlant_subscribeWithIdent_Base> Callback_TickerPlant_subscribeWithIdentPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::argo::TickerPlant::begin_sayHello.
 * Create a wrapper instance by calling ::argo::newCallback_TickerPlant_sayHello.
 */
class Callback_TickerPlant_sayHello_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TickerPlant_sayHello_Base> Callback_TickerPlant_sayHelloPtr;

}

namespace IceProxy
{

namespace argo
{

class TickListener : public virtual ::Ice::Proxy<TickListener, ::IceProxy::Ice::Object>
{
public:

    void onTick(const ::argo::TickSeq& t, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_onTick(_iceI_begin_onTick(t, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq& t, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_onTick(t, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq& t, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onTick(t, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq& t, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onTick(t, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq& t, const ::argo::Callback_TickListener_onTickPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onTick(t, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onTick(const ::argo::TickSeq& t, const ::Ice::Context& context, const ::argo::Callback_TickListener_onTickPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onTick(t, context, cb, cookie);
    }

    void end_onTick(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_onTick(const ::argo::TickSeq&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void onImage(const ::argo::TickImage& img, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_onImage(_iceI_begin_onImage(img, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage& img, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_onImage(img, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage& img, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImage(img, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage& img, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImage(img, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage& img, const ::argo::Callback_TickListener_onImagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImage(img, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::argo::TickImage& img, const ::Ice::Context& context, const ::argo::Callback_TickListener_onImagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_onImage(img, context, cb, cookie);
    }

    void end_onImage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_onImage(const ::argo::TickImage&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class TickerPlant : public virtual ::Ice::Proxy<TickerPlant, ::IceProxy::Ice::Object>
{
public:

    void subscribe(const ::argo::TickListenerPrx& l, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_subscribe(_iceI_begin_subscribe(l, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx& l, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_subscribe(l, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx& l, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_subscribe(l, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx& l, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_subscribe(l, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx& l, const ::argo::Callback_TickerPlant_subscribePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_subscribe(l, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribe(const ::argo::TickListenerPrx& l, const ::Ice::Context& context, const ::argo::Callback_TickerPlant_subscribePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_subscribe(l, context, cb, cookie);
    }

    void end_subscribe(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_subscribe(const ::argo::TickListenerPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void subscribeWithIdent(const ::Ice::Identity& ident, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_subscribeWithIdent(_iceI_begin_subscribeWithIdent(ident, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity& ident, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_subscribeWithIdent(ident, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity& ident, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_subscribeWithIdent(ident, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity& ident, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_subscribeWithIdent(ident, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity& ident, const ::argo::Callback_TickerPlant_subscribeWithIdentPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_subscribeWithIdent(ident, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_subscribeWithIdent(const ::Ice::Identity& ident, const ::Ice::Context& context, const ::argo::Callback_TickerPlant_subscribeWithIdentPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_subscribeWithIdent(ident, context, cb, cookie);
    }

    void end_subscribeWithIdent(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_subscribeWithIdent(const ::Ice::Identity&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string sayHello(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_sayHello(_iceI_begin_sayHello(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sayHello(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sayHello(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sayHello(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sayHello(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sayHello(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sayHello(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sayHello(const ::argo::Callback_TickerPlant_sayHelloPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sayHello(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sayHello(const ::Ice::Context& context, const ::argo::Callback_TickerPlant_sayHelloPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sayHello(context, cb, cookie);
    }

    ::std::string end_sayHello(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sayHello(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace argo
{

class TickListener : public virtual ::Ice::Object
{
public:

    typedef TickListenerPrx ProxyType;
    typedef TickListenerPtr PointerType;

    virtual ~TickListener();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void onTick(const TickSeq& t, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_onTick(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void onImage(const TickImage& img, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_onImage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const TickListener& lhs, const TickListener& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const TickListener& lhs, const TickListener& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class TickerPlant : public virtual ::Ice::Object
{
public:

    typedef TickerPlantPrx ProxyType;
    typedef TickerPlantPtr PointerType;

    virtual ~TickerPlant();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void subscribe(const TickListenerPrx& l, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_subscribe(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void subscribeWithIdent(const ::Ice::Identity& ident, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_subscribeWithIdent(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string sayHello(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sayHello(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const TickerPlant& lhs, const TickerPlant& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const TickerPlant& lhs, const TickerPlant& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::argo::TickDirection>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::argo::Tick>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::argo::Tick, S>
{
    static void write(S* ostr, const ::argo::Tick& v)
    {
        ostr->write(v.symbol);
        ostr->write(v.bidPx);
        ostr->write(v.askPx);
        ostr->write(v.bidDirection);
        ostr->write(v.askDirection);
    }
};

template<typename S>
struct StreamReader< ::argo::Tick, S>
{
    static void read(S* istr, ::argo::Tick& v)
    {
        istr->read(v.symbol);
        istr->read(v.bidPx);
        istr->read(v.askPx);
        istr->read(v.bidDirection);
        istr->read(v.askDirection);
    }
};

}
/// \endcond

namespace argo
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::argo::TickListener::begin_onTick.
 * Create a wrapper instance by calling ::argo::newCallback_TickListener_onTick.
 */
template<class T>
class CallbackNC_TickListener_onTick : public Callback_TickListener_onTick_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TickListener_onTick(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onTick.
 */
template<class T> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onTick<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onTick.
 */
template<class T> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onTick<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onTick.
 */
template<class T> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onTick<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onTick.
 */
template<class T> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onTick<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::argo::TickListener::begin_onTick.
 * Create a wrapper instance by calling ::argo::newCallback_TickListener_onTick.
 */
template<class T, typename CT>
class Callback_TickListener_onTick : public Callback_TickListener_onTick_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TickListener_onTick(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onTick.
 */
template<class T, typename CT> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onTick<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onTick.
 */
template<class T, typename CT> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onTick<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onTick.
 */
template<class T, typename CT> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onTick<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onTick.
 */
template<class T, typename CT> Callback_TickListener_onTickPtr
newCallback_TickListener_onTick(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onTick<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::argo::TickListener::begin_onImage.
 * Create a wrapper instance by calling ::argo::newCallback_TickListener_onImage.
 */
template<class T>
class CallbackNC_TickListener_onImage : public Callback_TickListener_onImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TickListener_onImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onImage.
 */
template<class T> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onImage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onImage.
 */
template<class T> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onImage<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onImage.
 */
template<class T> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onImage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onImage.
 */
template<class T> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickListener_onImage<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::argo::TickListener::begin_onImage.
 * Create a wrapper instance by calling ::argo::newCallback_TickListener_onImage.
 */
template<class T, typename CT>
class Callback_TickListener_onImage : public Callback_TickListener_onImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TickListener_onImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onImage.
 */
template<class T, typename CT> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onImage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onImage.
 */
template<class T, typename CT> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onImage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onImage.
 */
template<class T, typename CT> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onImage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickListener::begin_onImage.
 */
template<class T, typename CT> Callback_TickListener_onImagePtr
newCallback_TickListener_onImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickListener_onImage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::argo::TickerPlant::begin_subscribe.
 * Create a wrapper instance by calling ::argo::newCallback_TickerPlant_subscribe.
 */
template<class T>
class CallbackNC_TickerPlant_subscribe : public Callback_TickerPlant_subscribe_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TickerPlant_subscribe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribe.
 */
template<class T> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribe<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribe.
 */
template<class T> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribe<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribe.
 */
template<class T> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribe<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribe.
 */
template<class T> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribe<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::argo::TickerPlant::begin_subscribe.
 * Create a wrapper instance by calling ::argo::newCallback_TickerPlant_subscribe.
 */
template<class T, typename CT>
class Callback_TickerPlant_subscribe : public Callback_TickerPlant_subscribe_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TickerPlant_subscribe(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribe.
 */
template<class T, typename CT> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribe<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribe.
 */
template<class T, typename CT> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribe<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribe.
 */
template<class T, typename CT> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribe<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribe.
 */
template<class T, typename CT> Callback_TickerPlant_subscribePtr
newCallback_TickerPlant_subscribe(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribe<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::argo::TickerPlant::begin_subscribeWithIdent.
 * Create a wrapper instance by calling ::argo::newCallback_TickerPlant_subscribeWithIdent.
 */
template<class T>
class CallbackNC_TickerPlant_subscribeWithIdent : public Callback_TickerPlant_subscribeWithIdent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TickerPlant_subscribeWithIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribeWithIdent.
 */
template<class T> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribeWithIdent<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribeWithIdent.
 */
template<class T> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribeWithIdent<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribeWithIdent.
 */
template<class T> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribeWithIdent<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribeWithIdent.
 */
template<class T> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_subscribeWithIdent<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::argo::TickerPlant::begin_subscribeWithIdent.
 * Create a wrapper instance by calling ::argo::newCallback_TickerPlant_subscribeWithIdent.
 */
template<class T, typename CT>
class Callback_TickerPlant_subscribeWithIdent : public Callback_TickerPlant_subscribeWithIdent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TickerPlant_subscribeWithIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribeWithIdent.
 */
template<class T, typename CT> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribeWithIdent<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribeWithIdent.
 */
template<class T, typename CT> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribeWithIdent<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribeWithIdent.
 */
template<class T, typename CT> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribeWithIdent<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_subscribeWithIdent.
 */
template<class T, typename CT> Callback_TickerPlant_subscribeWithIdentPtr
newCallback_TickerPlant_subscribeWithIdent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_subscribeWithIdent<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::argo::TickerPlant::begin_sayHello.
 * Create a wrapper instance by calling ::argo::newCallback_TickerPlant_sayHello.
 */
template<class T>
class CallbackNC_TickerPlant_sayHello : public Callback_TickerPlant_sayHello_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_TickerPlant_sayHello(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        TickerPlantPrx proxy = TickerPlantPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_sayHello(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_sayHello.
 */
template<class T> Callback_TickerPlant_sayHelloPtr
newCallback_TickerPlant_sayHello(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_sayHello<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_sayHello.
 */
template<class T> Callback_TickerPlant_sayHelloPtr
newCallback_TickerPlant_sayHello(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TickerPlant_sayHello<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::argo::TickerPlant::begin_sayHello.
 * Create a wrapper instance by calling ::argo::newCallback_TickerPlant_sayHello.
 */
template<class T, typename CT>
class Callback_TickerPlant_sayHello : public Callback_TickerPlant_sayHello_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_TickerPlant_sayHello(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        TickerPlantPrx proxy = TickerPlantPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_sayHello(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_sayHello.
 */
template<class T, typename CT> Callback_TickerPlant_sayHelloPtr
newCallback_TickerPlant_sayHello(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_sayHello<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::argo::TickerPlant::begin_sayHello.
 */
template<class T, typename CT> Callback_TickerPlant_sayHelloPtr
newCallback_TickerPlant_sayHello(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TickerPlant_sayHello<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
